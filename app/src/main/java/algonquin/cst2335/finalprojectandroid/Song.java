/*
 * FileName: Song.java
 * Purpose: Represents a song entity in the application's database.
 * Author: Jiaxin Yan
 * Lab Section: 022
 * Creation Date: 03/28/2024
 */
package algonquin.cst2335.finalprojectandroid;

import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
/**
 * Represents a song entity in the application's database. This class is annotated with {@link Entity} to signify
 * its usage with Room as a table within the database. Each instance of Song corresponds to a row within the
 * song table, with each field representing a column in the table. The `id` field is set as the primary key
 * and is autogenerated by the database to ensure uniqueness.
 * This class includes a constructor for creating new Song instances, along with getter and setter methods for
 * each field to provide encapsulated access to the properties of the Song.
 *
 * @author Jiaxin Yan
 * @lab_section 022
 * @creation_date 03/28/2024
 */
@Entity
public class Song {
    /**
     * The unique identifier for the song. This field is marked with {@code @PrimaryKey}, indicating it serves as
     * the primary key in the database table. The {@code autoGenerate = true} parameter specifies that Room will
     * automatically generate a unique ID for each new song, ensuring that each song has a unique identifier.
     */
    @PrimaryKey(autoGenerate = true)
    @NonNull
    private int id;
    /**
     * The title of the song. This field is stored in the database column named "title". The {@code @ColumnInfo}
     * annotation is used to specify the name of the column in the database table that this field will correspond to.
     */
    @ColumnInfo(name="title")
    private String title;
    /**
     * The duration of the song. It represents the length of the song and is user-readable.
     */
    @ColumnInfo(name="duration")
    private String duration;
    /**
     * The name of the album to which the song belongs. This field is stored in the database column named "albumName".
     * It allows for categorization of songs by album within the database, providing a means to group songs from the
     * same album together.
     */
    @ColumnInfo(name="albumName")
    private String albumName;
    /**
     * The URL for the album's cover image. This field is stored in the database column named "albumCoverUrl". It provides
     * a reference to an external resource where the album cover image can be found and is intended for use in displaying
     * the album cover in the application's UI.
     */
    @ColumnInfo(name="albumCoverUrl")
    private String albumCoverUrl;
    /**
     * Constructs a new Song instance with specified title, duration, album name, and album cover URL.
     * This constructor is used to create a Song object before inserting it into the database, where the
     * ID will be auto-generated.
     *
     * @param title The title of the song.
     * @param duration The duration of the song in a user-readable format (e.g., "3:45").
     * @param albumName The name of the album to which the song belongs.
     * @param albumCoverUrl The URL for the album's cover image.
     */
    public Song( String title, String duration, String albumName, String albumCoverUrl) {
        this.title = title;
        this.duration = duration;
        this.albumName = albumName;
        this.albumCoverUrl = albumCoverUrl;
    }
    /**
     * Sets the ID of the song. This is primarily used by Room to set the auto-generated ID when a song
     * is inserted into the database.
     *
     * @param id The unique identifier for the song.
     */
    public void setId(int id) {
        this.id = id;
    }
    /**
     * Gets the unique identifier for the song. This ID is auto-generated by the database when the song is inserted.
     *
     * @return The unique ID of the song.
     */
    public int getId() {
        return id;
    }
    /**
     * Gets the title of the song.
     *
     * @return The title of the song.
     */
    public String getTitle() {
        return title;
    }
    /**
     * Gets the duration of the song.
     * @return The duration of the song.
     */
    public String getDuration() {
        return duration;
    }
    /**
     * Gets the name of the album to which the song belongs.
     *
     * @return The name of the album.
     */
    public String getAlbumName() {
        return albumName;
    }
    /**
     * Gets the URL for the album's cover image. This URL can be used to download or display the album cover.
     *
     * @return The URL of the album's cover image.
     */
    public String getAlbumCoverUrl() {
        return albumCoverUrl;
    }
}
